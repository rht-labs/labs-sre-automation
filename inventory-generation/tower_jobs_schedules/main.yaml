---
- name: Generate ansible-tower scheduled notification inventory based off of engagement.json
  hosts: tower_jobs_schedules
  gather_facts: false
  tasks:
    - name: "Fail If Working Directory Is Not Provided"
      fail:
        msg: "directory var needs to be provided in order to ensure a safe working directory"
      when:
        - directory is undefined or (directory | trim) == ""

    - name: Read Engagement Data
      include_vars:
        file: "{{ directory }}/engagement.json"

    - name: Combine customer and engagement name
      set_fact:
        customer_engagement: "{{ customer_name | lower | replace(' ', '_') }}-{{ project_name | lower | replace(' ', '_') }}"

    - name: Residency Engagement Type inventory
      block:
        - name: "Write inventory to file"
          template:
            src: "tower-management-host.yaml.j2"
            dest: "{{ directory }}/iac/inventories/tower_jobs_schedules/inventory/group_vars/tower-management-host.yaml"

        - name: "Create hosts file"
          copy:
            src: "hosts"
            dest: "{{ directory }}/iac/inventories/tower_jobs_schedules/inventory/hosts"
      when: 
        - start_date is defined
        - engagement_type | default('') == 'Residency'
        - (archive_date | default('2006-01-02T15:04:05.000Z') | to_datetime('%Y-%m-%dT%H:%M:%S.%fZ')).strftime('%s') > now(utc=true).strftime('%s')

    - name: DO500 Engagement Type inventory
      block:
        - name: "Write inventory to file"
          template:
            src: "do500-tower-management-host.yaml.j2"
            dest: "{{ directory }}/iac/inventories/tower_jobs_schedules/inventory/group_vars/tower-management-host.yaml"

        - name: "Create hosts file"
          copy:
            src: "hosts"
            dest: "{{ directory }}/iac/inventories/tower_jobs_schedules/inventory/hosts"
      when: 
        - start_date is defined
        - engagement_type | default('') == 'DO500'
        - (archive_date | default('2006-01-02T15:04:05.000Z') | to_datetime('%Y-%m-%dT%H:%M:%S.%fZ')).strftime('%s') > now(utc=true).strftime('%s')
