---

- name: Generate identity-management inventory based off of engagement.json
  hosts: local
  gather_facts: true
  tasks:
    - name: "Fail If Working Directory Is Not Provided"
      fail:
        msg: "directory var needs to be provided in order to ensure a safe working directory"
      when:
        - directory is undefined or (directory | trim) == ""

    - name: Read Engagement Data
      include_vars:
        file: "{{ directory }}/engagement.json"

    - name: Check if Runtime Data file exist
      stat:
        path: "{{ directory }}/runtime.json"
      register: runtime_file_data

    - name: Fail if runtime.json not found
      fail:
        msg: "The runtime.json file not found"
      when: not runtime_file_data.stat.exists

    - name: Read Runtime Data
      include_vars:
        file: "{{ directory }}/runtime.json"
      when: runtime_file_data.stat.exists

    - name: "Fail If Governor Type Is Not Provided"
      fail:
        msg: "governor_type and governor_spec vars need to be provided in order to indicate babylon workflow"
      when:
        - (governor_type is undefined or (governor_type | trim) == "") or (governor_spec is undefined or (governor_spec | trim) == "")

    - name: "Fail if user_options.user_roles.options Is Not Provided"
      fail:
        msg: "user_options.user_roles.options is not defined at runtime.json file or contain incorrect values"
      when: >
        user_options is undefined or 
        user_options.user_roles is undefined or
        user_options.user_roles.options is undefined or
        user_options.user_roles.options[0].value is undefined

    - name: Generate Timestamp
      set_fact:
        inv_ts: "{{ lookup('pipe','date +%Y%m%d%H%M%S') }}"

    - name: Read Credentials
      include_vars:
        file: "{{ directory }}/{{ config_dir }}/{{ item }}"
      loop:
        - "ocp-admin-credentials.json"
        - "ocp-ldap-sa-credentials.json"

    #####################################################################################################################
    # Process list of users in the queue that needs to be removed
    # 
    - block:
        - include_tasks: process_queue_list.yml
        - include_tasks: process_list_of_users.yml
          vars:
            list_of_users_to_process: "{{ list_of_users_to_remove | d([]) }}"
        - set_fact:
            users_to_remove: "{{ processed_users | d([]) }}"

    #####################################################################################################################
    # Process list of users that are part of this engagement
    # 
    - block:
        - include_tasks: process_list_of_users.yml
          vars:
            list_of_users_to_process: "{{ engagement_users | d([]) }}"
        - set_fact:
            users: "{{ processed_users | d([]) }}"

    #####################################################################################################################
    # Process user groups and group memberships
    # 
    - include_tasks: process_groups.yml
      loop_control:
        loop_var: group_item
      loop: "{{ user_options.user_roles.options }}"

    - name: "Get Unique Groups from runtime config"
      set_fact:
        unique_groups: "{{ user_options.user_roles.options | json_query('[].value') | unique }}"

    #####################################################################################################################
    # Add in the LDAP SA and group sync memberships
    # 
    - name: "Create a LDAP user and group facts to simplify processing below"
      set_fact:
        ldap_users:
          - first_name: 'LDAP'
            last_name: 'SA'
            email: 'ldap@localhost.com'
            user_name: "{{ ocp_ldap_sa_username }}"
            password: "{{ ocp_ldap_sa_password }}"
            generate_password: False
            notify_user: False
        ldap_groups:
          - name: 'ldap-members'
            childgroups: "{{ unique_groups }}"

    - name: "Add LDAP Service Account to list of users"
      set_fact:
        users: "{{ (users | default([])) + ldap_users }}"

    - name: Add LDAP Groups Grouping
      set_fact:
        user_groups: "{{ (user_groups | default([])) + ldap_groups }}"


    #####################################################################################################################
    # Generate the CC list for emails
    # 
    - name: "Set List of Mail CC"
      set_fact:
        cc_list: "{{ ', '.join(( '{{ engagement_lead_email }}', '{{ technical_lead_email }}' )) }}"


    #####################################################################################################################
    # Gather repository facts for better processing below
    # 
    - name: "Set repository information"
      set_fact:
        repository_url: "{{ url | default(omit) }}"
        repository_ssh_key: "{{ lookup('file', ssh_key_data_path, lstrip=False, rstrip=False) | default(omit) }}"
        repository_username: "{{ username if username is defined else omit }}"
        repository_password: "{{ password if password is defined else omit }}"


    #####################################################################################################################
    # Right now, the only supported configuration is a list of one hosting environment.
    # In the near future, this should be updated to support more than one, and this comment (and the code below)
    # should be updated to support this. For now, this checking is just looking for more than zero hosting environments,
    # but will default to use the value(s) from the first one.

    - block:
        - name: "Set Identity Provider facts"
          set_fact:
            idp_type: "{{ idp_type | default('idm') }}"
            ipa_admin_user: "{{ ocp_admin_username }}"
            ipa_admin_password: "{{ ocp_admin_password }}"
            ipa_validate_certs: "{{ ipa_validate_certs | default(true) }}"

        - name: "Assemble inventory"
          set_fact:
            claim_content:
              env_end_date: "{{ (archive_date | regex_replace('^(.*)T.*$', '\\1') | to_datetime('%Y-%m-%d')).strftime('%d %b %Y') }}"
              end_date: "{{ (end_date | regex_replace('^(.*)T.*$', '\\1') | to_datetime('%Y-%m-%d')).strftime('%d %b %Y') }}"
              start_date: "{{ (start_date | regex_replace('^(.*)T.*$', '\\1') | to_datetime('%Y-%m-%d')).strftime('%d %b %Y') }}"
              customer_name: "{{ customer_name }}"
              project_name: "{{ project_name }}"
              ocp_subdomain: "{{ hosting_environments[0].ocp_sub_domain | lower }}"
              ipa_validate_certs: "{{ ipa_validate_certs }}"
              ipa_admin_user: "{{ ipa_admin_user }}"
              ipa_admin_password: "{{ ipa_admin_password }}"
              list_of_mail_cc: "{{ cc_list }}"
              lodestar_identities:
                users: "{{ users }}"
                groups: "{{ user_groups }}"
              lodestar_identities_remove:
                users: "{{ users_to_remove | default([]) }}"
              repository:
                url: "{{ repository_url if repository_url is defined else omit }}"
                ssh_key: "{{ ( repository_ssh_key | to_nice_yaml( default_style='>-', indent=4, width=5000 ) | trim) if repository_ssh_key is defined else omit }}"
                username: "{{ repository_username if repository_username is defined else omit }}"
                password: "{{ repository_password if repository_password is defined else omit }}"

        - name: "Add directory for group_vars/all"
          file:
            path: "{{ directory }}/iac/inventories/identity-management/inventory/group_vars"
            state: directory

        - name: "Check For Existing Inventory File"
          stat:
            path: "{{ directory }}/iac/inventories/identity-management/inventory/group_vars/all.yml"
          register: existing_inv

        - name: "Pull existing inventory vars"
          include_vars:
            file: "{{ directory }}/iac/inventories/identity-management/inventory/group_vars/all.yml"
            name: existing_inv_contents
          when:
            - existing_inv.stat.exists

        - name: "Diff existing vars with new inventory"
          set_fact:
            inv_has_diff: true
          when:
            - existing_inv.stat.exists
            - existing_inv_contents is defined
            - existing_inv_contents != (claim_content | from_yaml)

        - name: "Write inventory to file"
          copy:
            content: "{{ claim_content | to_nice_yaml(indent=2) }}"
            dest: "{{ directory }}/iac/inventories/identity-management/inventory/group_vars/all.yml"

        - name: "Create hosts file"
          copy:
            content: "[identity-hosts]\nlocalhost"
            dest: "{{ directory }}/iac/inventories/identity-management/inventory/hosts"

        - name: "Create ResourceClaim"
          copy:
            content: "{{ lookup('template', inventory_dir + '/../files/templates/resourceclaim.yaml.j2') }}"
            dest: "{{ directory }}/ocp-init/id-mgmt.yaml"
          when:
            - ( inv_has_diff is defined and inv_has_diff == true ) or ( not existing_inv.stat.exists )
      when:
        - hosting_environments is defined
        - hosting_environments|length > 0
        - hosting_environments[0].ocp_sub_domain is defined
